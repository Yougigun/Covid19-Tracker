{"version":3,"sources":["util.js","InfoBox.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["casesTypeColors","cases","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","InfoBox","active","title","total","selectedType","props","Card","onClick","className","CardContent","style","display","flexDirection","alignItems","Typography","color","marginLeft","Map","countries","casesType","center","zoom","console","log","viewport","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","backgroundImage","flag","showDataOnMap","Table","options","legend","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","rgb","half_op","LineGraph","useState","setData","useEffect","fetch","then","res","json","chartData","lastDataPoint","date","newDataPoint","x","y","push","buildChartData","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","catch","error","response","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","i","key","e","todayCases","todayRecovered","todayDeaths","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fe7df35d.chunk.js","sourcesContent":["import React from 'react';\r\nimport numeral from 'numeral'\r\nimport {Circle, Popup} from \"react-leaflet\"\r\n\r\nconst casesTypeColors = {\r\n    cases:{\r\n        hex:\"#CC1031\",\r\n        // rgb:\"rgb(204,16,52)\",\r\n        // half_op:\"rgba(204,16,52,0.5)\",\r\n        multiplier:800\r\n    },\r\n    recovered:{\r\n        hex:\"#7dd71d\",\r\n        // rgb:\"rgb(125,215,29)\",\r\n        // half_op:\"rgba(125,215,29,0.5)\",\r\n        multiplier:1200\r\n    },\r\n    deaths:{\r\n        hex:\"#fb4443\",\r\n        // rgb:\"rgb(251,68,67)\",\r\n        // half_op:\"rgba(251,68,67,0.5)\",\r\n        multiplier:2000\r\n    }\r\n}\r\n\r\nexport const sortData = data =>(\r\n    data.sort((a,b)=> a.cases>b.cases? -1:1)\r\n)\r\n\r\n// Draw circles on the map with interactive tooltip\r\nexport const showDataOnMap = (data, casesType=\"cases\") => {\r\n    console.log(\"data>>>\",data)\r\n    return data.map(country=>(\r\n    <Circle\r\n        center={[country.countryInfo.lat,country.countryInfo.long]}\r\n        fillOpacity={0.4}\r\n        color={casesTypeColors[casesType].hex}\r\n        fillColor={casesTypeColors[casesType].hex}\r\n        radius={\r\n            Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n        }\r\n    >\r\n        <Popup >\r\n            <div className=\"info-container\">\r\n                <div \r\n                    className =\"info-flag\"\r\n                    style={{backgroundImage:`url(${country.countryInfo.flag})`}}\r\n                />\r\n                <div className =\"info-name\">{country.country}</div>\r\n                <div className =\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                <div className =\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                <div className =\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n            </div>\r\n        </Popup>\r\n    </Circle>\r\n    ))\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>stat?\r\n                                     `+${numeral(stat).format(\"0,0a\")}`\r\n                                     :\"+0\"","import React from 'react'\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\"\r\n\r\nimport \"./InfoBox.css\"\r\nfunction InfoBox({active, title, cases, total,selectedType, ...props}) {\r\n    return (\r\n            <Card \r\n            onClick={props.onClick}\r\n            className={`infoBox ${active && selectedType}`}>\r\n                <CardContent style={{display:\"flex\",flexDirection:\"column\",alignItems:\"center\"}}>\r\n                    <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                        {title} \r\n                    </Typography>\r\n                    <div style={{display:\"flex\",alignItems:\"center\"}}>\r\n                        <h2 className={`infoBox__cases ${title==='Recovered'&&'infoBox_recoverFont'}`}>{cases}</h2>\r\n                        <p style={{marginLeft:\"5px\"}}>Today</p>\r\n                    </div>\r\n                    <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                        {total} Total\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react'\r\nimport {Map as LeafletMap, TileLayer} from 'react-leaflet'\r\nimport './Map.css'\r\nimport {showDataOnMap} from './util'\r\n\r\nfunction Map({countries, casesType, center,zoom}) {\r\n    console.log(\"countries>>\",countries);\r\n    console.log(\"casesType>>\",casesType);\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom} viewport={null}>\r\n                <TileLayer \r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenstreetMap</a>contributors'\r\n                />\r\n                {/* Loop through countries and draw circles on the screen*/}\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css'\r\nimport numeral from 'numeral'\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country,cases})=>(\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport numeral from 'numeral'\r\nimport './LineGraph.css'\r\nconst options = {\r\n    legend: {\r\n        display: false\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0\r\n        }\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0.0\")\r\n            }\r\n        }\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\"\r\n                }\r\n            }\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\")\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\nconst casesTypeColors = {\r\n    cases:{\r\n        hex:\"#CC1031\",\r\n        rgb:\"rgb(204,16,52)\",\r\n        half_op:\"rgba(204,16,52,0.5)\",\r\n        multiplier:800\r\n    },\r\n    recovered:{\r\n        hex:\"#7dd71d\",\r\n        rgb:\"rgb(125,215,29)\",\r\n        half_op:\"rgba(125,215,29,0.5)\",\r\n        multiplier:1200\r\n    },\r\n    deaths:{\r\n        hex:\"#fb4443\",\r\n        rgb:\"rgb(251,68,67)\",\r\n        half_op:\"rgba(251,68,67,0.5)\",\r\n        multiplier:2000\r\n    }\r\n}\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n    const chartData = []\r\n    let lastDataPoint\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            const newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint\r\n            }\r\n            chartData.push(newDataPoint)\r\n        }\r\n        lastDataPoint = data[casesType][date]\r\n        // lastDataPoint = data[\"cases\"][date] \r\n    }\r\n    return chartData\r\n}\r\nfunction LineGraph({ casesType }) {\r\n    const [data, setData] = useState([])\r\n    // \"https://disease.sh/v3/covid-19/historical/all?lastdays=120\"\r\n    useEffect(() => {\r\n        fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                const chartData = buildChartData(data,casesType)\r\n                console.log(chartData);\r\n                setData(chartData)\r\n            })\r\n    }, [casesType])\r\n\r\n    // console.log(\"data>>>>\", data);\r\n    return (\r\n        <div className=\"lineGraph\">\r\n            {/* <h1>I am a Graph</h1> */}\r\n            <Line\r\n                data={{\r\n                    datasets: [\r\n                        {\r\n                            data: data,\r\n                            backgroundColor:  casesTypeColors[casesType].half_op,\r\n                            borderColor: casesTypeColors[casesType].rgb\r\n                        }\r\n                    ]\r\n                }}\r\n                options={options}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { useState, useEffect } from 'react';\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\"\n\nimport {sortData, prettyPrintStat} from './util'\nimport './App.css';\nimport InfoBox from \"./InfoBox\"\nimport Map from \"./Map\"\nimport Table from \"./Table\"\nimport LineGraph from './LineGraph'\nimport \"leaflet/dist/leaflet.css\"\nfunction App() {\n  const [countries, setCountries] = useState([])\n  const [country, setCountry] = useState(\"worldwide\")\n  const [countryInfo, setCountryInfo] = useState(null)\n  const [tableData, setTableData] = useState([])\n  const [mapCenter, setMapCenter] = useState({\n    lat:34.80746,lng:-40.4796\n  })\n  const [mapZoom, setMapZoom] = useState(2)\n  const [mapCountries,setMapCountries] = useState([])\n  const [casesType, setCasesType] = useState('cases')\n\n  useEffect(() => {\n    // Get worldwide data\n    console.log(\"useEffect-1\")\n    const url = \"https://disease.sh/v3/covid-19/all\"\n    fetch(url).then(res => res.json()).then(data => {\n      setCountryInfo(data)\n    }).catch((error)=>{console.log(\"error>>>>\",\"https://disease.sh/v3/covid-19/all\",error)})\n  }, [])\n  useEffect(() => {\n    //Get all countries data for table\n    console.log(\"useEffect-2\")\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then(data => {\n          const countries = data.map(country => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2\n            }\n          ))\n          const sortedData = sortData(data)\n          setTableData(sortedData)\n          setCountries(countries)\n          setMapCountries(data)\n        }).catch((error)=>{console.log(\"error>>>>\",\"https://disease.sh/v3/covid-19/countries\",error)})\n    }\n    getCountriesData()\n  }, [])\n  // https://disease.sh/v3/covid-19/countries\n  const onCountryChange = async (event) => {\n    console.log(\"onCountryChange\")\n    const countryCode = event.target.value\n    const url = countryCode === \"worldwide\" ?\n      \"https://disease.sh/v3/covid-19/all\"\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n    await fetch(url).then(res => res.json()).then(data => {\n      setCountry(countryCode)\n      setCountryInfo(data)\n      if (countryCode!==\"worldwide\"){\n        setMapCenter([data.countryInfo.lat,data.countryInfo.long])\n        setMapZoom(4)\n      }else{\n        setMapCenter([23.69,120.96])\n        setMapZoom(4)\n      }\n    }).catch((error)=>{console.log(\"error>>>>\",\"https://disease.sh/v3/covid-19/countries[all]\",error)})\n  }\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER - Gary</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {\n                countries.map((country, i) => <MenuItem key={i} value={country.value}>{country.name}</MenuItem>)\n              }\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox \n            active={casesType===\"cases\"}\n            title=\"Covid-19 Cases\" \n            selectedType=\"InfoBox--selected--cases\"\n            onClick={e=>setCasesType('cases')}\n            cases={countryInfo ? prettyPrintStat(countryInfo.todayCases) : \"loading...\"}\n            total={countryInfo ? prettyPrintStat(countryInfo.cases) : \"loading...\"} />\n          <InfoBox \n            active={casesType===\"recovered\"}\n            selectedType=\"InfoBox--selected--recovered\"\n            title=\"Recovered\" \n            onClick={e=>setCasesType('recovered')}\n            cases={countryInfo ? prettyPrintStat(countryInfo.todayRecovered) : \"loading...\"}\n            total={countryInfo ? prettyPrintStat(countryInfo.recovered) : \"loading...\"} />\n          <InfoBox \n            active={casesType===\"deaths\"}\n            selectedType=\"InfoBox--selected--deaths\"\n            title=\"Deaths\" \n            onClick={e=>setCasesType('deaths')}\n            cases={countryInfo ? prettyPrintStat(countryInfo.todayDeaths) : \"loading...\"}\n            total={countryInfo ? prettyPrintStat(countryInfo.deaths) : \"loading...\"} />\n        </div>\n        <Map \n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\" >\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData}/>\n          <h3 style={{marginTop:\"10px\"}}>Worldwide New {casesType}</h3>\n          <LineGraph casesType={casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}