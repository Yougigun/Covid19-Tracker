{"version":3,"sources":["InfoBox.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","Card","className","CardContent","Typography","color","Map","App","useState","countries","setCountries","country","setCountry","countryInfo","setCountryInfo","useEffect","a","fetch","then","response","json","data","map","name","value","iso2","res","getCountriesData","onCountryChange","event","countryCode","target","url","console","log","FormControl","Select","variant","onChange","MenuItem","i","key","todayCases","todayRecovered","recovered","todayDeaths","deaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gXAuBeA,MAnBf,YAAyC,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,MAC5B,OACQ,kBAACC,EAAA,EAAD,CAAMC,UAAU,WACZ,kBAACC,EAAA,EAAD,KAEI,kBAACC,EAAA,EAAD,CAAYF,UAAU,iBAAiBG,MAAM,iBACxCP,GAGL,wBAAII,UAAU,kBAAkBH,EAAhC,KAEA,kBAACK,EAAA,EAAD,CAAYF,UAAU,iBAAiBG,MAAM,iBACxCL,EADL,aCLLM,MARf,WACI,OACI,yBAAKJ,UAAU,OACX,2DC+FGK,MAxFf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEiBF,mBAAS,aAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGwBJ,mBAAS,MAHjC,mBAGNK,EAHM,KAGMC,EAHN,KAKbC,qBAAU,YACc,uCAAG,sBAAAC,EAAA,sEACjBC,MAAM,4CACTC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAAG,GACJ,IAAMZ,EAAYY,EAAKC,KAAI,SAAAX,GAAO,MAChC,CACEY,KAAMZ,EAAQA,QACda,MAAOb,EAAQE,YAAYY,SAG/Bf,EAAaD,MAVM,aAYX,8CAZW,SAajBQ,MADM,+CACKC,MAAK,SAAAQ,GAAG,OAAEA,EAAIN,UAAQF,MAAK,SAAAG,GAC1CT,EAAW,MAGXE,EAAeO,MAjBM,2CAAH,qDAmBtBM,KACC,IAEH,IAAMC,EAAe,uCAAG,WAAOC,GAAP,iBAAAb,EAAA,6DAChBc,EAAcD,EAAME,OAAOP,MAC3BQ,EAAqB,cAAfF,EACZ,+CADY,mDAEiCA,GAJvB,SAKhBb,MAAMe,GAAKd,MAAK,SAAAQ,GAAG,OAAEA,EAAIN,UAAQF,MAAK,SAAAG,GAC1CT,EAAWkB,GAGXhB,EAAeO,GACfY,QAAQC,IAAI,mBAAmBb,MAVX,2CAAH,sDAarB,OACE,yBAAKnB,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,eACb,gDACA,kBAACiC,EAAA,EAAD,CAAajC,UAAU,iBACrB,kBAACkC,EAAA,EAAD,CAAQC,QAAQ,WACdb,MAAOb,EACP2B,SAAUV,GAEV,kBAACW,EAAA,EAAD,CAAUf,MAAM,aAAhB,aAEEf,EAAUa,KAAI,SAACX,EAAQ6B,GAAT,OAAe,kBAACD,EAAA,EAAD,CAAUE,IAAKD,EAAGhB,MAAOb,EAAQa,OAAQb,EAAQY,YAKtF,yBAAKrB,UAAU,cACb,kBAAC,EAAD,CAASJ,MAAM,oBACPC,MAAOc,EAAaA,EAAY6B,WAAW,aAC3C1C,MAAOa,EAAaA,EAAYd,MAAM,eAC9C,kBAAC,EAAD,CAASD,MAAM,YACPC,MAAOc,EAAaA,EAAY8B,eAAe,aAC/C3C,MAAOa,EAAaA,EAAY+B,UAAU,eAClD,kBAAC,EAAD,CAAS9C,MAAM,SACPC,MAAOc,EAAaA,EAAYgC,YAAY,aAC5C7C,MAAOa,EAAaA,EAAYiC,OAAO,gBAOjD,kBAAC,EAAD,OAEF,kBAAC7C,EAAA,EAAD,CAAMC,UAAU,cACd,kBAACC,EAAA,EAAD,KAEE,oEAEA,sECjFU4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.c7345bec.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\"\r\n\r\nimport \"./InfoBox.css\"\r\nfunction InfoBox({title, cases, total}) {\r\n    return (\r\n            <Card className=\"infoBox\">\r\n                <CardContent>\r\n                    {/* Title */}\r\n                    <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                        {title} \r\n                    </Typography>\r\n                    {/* Number of Cases */}\r\n                    <h2 className=\"infoBox__cases\">{cases} </h2>\r\n                    {/* Total*/}\r\n                    <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                        {total} Total\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react'\r\n\r\nfunction Map() {\r\n    return (\r\n        <div className=\"map\">\r\n            <h1>I am a map ##Not Finished</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React, { useState, useEffect } from 'react';\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent\n} from \"@material-ui/core\"\n\nimport './App.css';\nimport InfoBox from \"./InfoBox\"\nimport Map from \"./Map\"\nfunction App() {\n  const [countries, setCountries] = useState([])\n  const [country, setCountry] = useState(\"worldwide\")\n  const [countryInfo,setCountryInfo] = useState(null)\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then(data => {\n          const countries = data.map(country => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2\n            }\n          ))\n          setCountries(countries)\n        })\n      const url = \"https://disease.sh/v3/covid-19/countries/ES\"\n      await fetch(url).then(res=>res.json()).then(data=>{\n        setCountry(\"ES\")\n        // All of the data ...\n        // from the country code\n        setCountryInfo(data)})\n    }\n    getCountriesData()\n  }, [])\n  // https://disease.sh/v3/covid-19/countries\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value\n    const url = countryCode ===\"worldwide\"?\n    \"https://disease.sh/v3/covid-19/countries/all\"\n    :`https://disease.sh/v3/covid-19/countries/${countryCode}`\n    await fetch(url).then(res=>res.json()).then(data=>{\n      setCountry(countryCode)\n      // All of the data ...\n      // from the country code\n      setCountryInfo(data)\n      console.log(\"COUNTRY INFO >>>\",data);\n    })\n  }\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {\n                countries.map((country,i) => <MenuItem key={i} value={country.value}>{country.name}</MenuItem>)\n              }\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox title=\"Coronavirus Cases\" \n                  cases={countryInfo? countryInfo.todayCases:\"loading...\"} \n                  total={countryInfo? countryInfo.cases:\"loading...\"}/>\n          <InfoBox title=\"Recovered\" \n                  cases={countryInfo? countryInfo.todayRecovered:\"loading...\"}  \n                  total={countryInfo? countryInfo.recovered:\"loading...\"} />\n          <InfoBox title=\"Deaths\" \n                  cases={countryInfo? countryInfo.todayDeaths:\"loading...\"} \n                  total={countryInfo? countryInfo.deaths:\"loading...\"}  />\n        </div>\n\n        {/* Table */}\n        {/* Graph */}\n\n        {/* Map */}\n        <Map />\n      </div>\n      <Card className=\"app__right\" >\n        <CardContent>\n          {/* Table */}\n          <h3>Live Cases by Country ##Not Finished</h3>\n          {/* Graph */}\n          <h3>Worldwide New Cases ##Not Finished</h3>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}