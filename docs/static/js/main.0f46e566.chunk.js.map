{"version":3,"sources":["util.js","InfoBox.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["sortData","data","sort","a","b","cases","InfoBox","title","total","Card","className","CardContent","Typography","color","Map","Table","countries","map","country","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","caseType","useState","setData","useEffect","fetch","then","res","json","chartData","lastDataPoint","casesType","date","newDataPoint","x","y","push","buildChartData","console","log","datasets","backgroundColor","borderColor","App","setCountries","setCountry","countryInfo","setCountryInfo","tableData","setTableData","response","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","url","FormControl","Select","variant","onChange","MenuItem","i","key","todayCases","todayRecovered","recovered","todayDeaths","deaths","style","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0f46e566.chunk.js","sourcesContent":["export const sortData = data =>(\r\n    data.sort((a,b)=> a.cases>b.cases? -1:1)\r\n)","import React from 'react'\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\"\r\n\r\nimport \"./InfoBox.css\"\r\nfunction InfoBox({title, cases, total}) {\r\n    return (\r\n            <Card className=\"infoBox\">\r\n                <CardContent>\r\n                    {/* Title */}\r\n                    <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                        {title} \r\n                    </Typography>\r\n                    {/* Number of Cases */}\r\n                    <h2 className=\"infoBox__cases\">{cases} </h2>\r\n                    {/* Total*/}\r\n                    <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                        {total} Total\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react'\r\n\r\nfunction Map() {\r\n    return (\r\n        <div className=\"map\">\r\n            <h1>I am a map ##Not Finished</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css'\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country,cases})=>(\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{cases}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport numeral from 'numeral'\r\nimport './LineGraph.css'\r\nconst options = {\r\n    legend: {\r\n        display: false\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0\r\n        }\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0.0\")\r\n            }\r\n        }\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\"\r\n                }\r\n            }\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\")\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n    const chartData = []\r\n    let lastDataPoint\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            const newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint\r\n            }\r\n            chartData.push(newDataPoint)\r\n        }\r\n        lastDataPoint = data[casesType][date]\r\n        // lastDataPoint = data[\"cases\"][date] \r\n    }\r\n    return chartData\r\n}\r\nfunction LineGraph({ caseType }) {\r\n    const [data, setData] = useState([])\r\n    // \"https://disease.sh/v3/covid-19/historical/all?lastdays=120\"\r\n    useEffect(() => {\r\n        fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                const chartData = buildChartData(data)\r\n                console.log(chartData);\r\n                setData(chartData)\r\n            })\r\n    }, [caseType])\r\n\r\n    console.log(\"data>>>>\", data);\r\n    return (\r\n        <div className=\"lineGraph\">\r\n            {/* <h1>I am a Graph</h1> */}\r\n            <Line\r\n                data={{\r\n                    datasets: [\r\n                        {\r\n                            data: data,\r\n                            backgroundColor: \"rgba(204,16,52,0.5)\",\r\n                            borderColor: \"#CC1034\"\r\n                        }\r\n                    ]\r\n                }}\r\n                options={options}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { useState, useEffect } from 'react';\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\"\n\nimport {sortData} from './util'\nimport './App.css';\nimport InfoBox from \"./InfoBox\"\nimport Map from \"./Map\"\nimport Table from \"./Table\"\nimport LineGraph from './LineGraph'\nfunction App() {\n  const [countries, setCountries] = useState([])\n  const [country, setCountry] = useState(\"worldwide\")\n  const [countryInfo, setCountryInfo] = useState(null)\n  const [tableData, setTableData] = useState([])\n\n\n  useEffect(() => {\n    const url = \"https://disease.sh/v3/covid-19/all\"\n    fetch(url).then(res => res.json()).then(data => {\n      setCountryInfo(data)\n    })\n  }, [])\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then(data => {\n          const countries = data.map(country => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2\n            }\n          ))\n          const sortedData = sortData(data)\n          setTableData(sortedData)\n          setCountries(countries)\n        })\n    }\n    getCountriesData()\n  }, [])\n  // https://disease.sh/v3/covid-19/countries\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value\n    const url = countryCode === \"worldwide\" ?\n      \"https://disease.sh/v3/covid-19/all\"\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n    await fetch(url).then(res => res.json()).then(data => {\n      setCountry(countryCode)\n      // All of the data ...\n      // from the country code\n      setCountryInfo(data)\n    })\n  }\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER - Gary</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {\n                countries.map((country, i) => <MenuItem key={i} value={country.value}>{country.name}</MenuItem>)\n              }\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox title=\"Coronavirus Cases\"\n            cases={countryInfo ? countryInfo.todayCases : \"loading...\"}\n            total={countryInfo ? countryInfo.cases : \"loading...\"} />\n          <InfoBox title=\"Recovered\"\n            cases={countryInfo ? countryInfo.todayRecovered : \"loading...\"}\n            total={countryInfo ? countryInfo.recovered : \"loading...\"} />\n          <InfoBox title=\"Deaths\"\n            cases={countryInfo ? countryInfo.todayDeaths : \"loading...\"}\n            total={countryInfo ? countryInfo.deaths : \"loading...\"} />\n        </div>\n\n        {/* Graph */}\n\n        {/* Map */}\n        <Map />\n      </div>\n      <Card className=\"app__right\" >\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData}/>\n          {/* Graph */}\n          <h3 style={{marginTop:\"10px\"}}>Worldwide New Cases</h3>\n          <LineGraph />\n          \n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}